
driverdev_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000054c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d4  080006dc  000016dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  000016dc  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  000016dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006dc  000016dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000016d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006d8  080006d8  000016d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000016dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fb7  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000463  00000000  00000000  000026bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024a6  00000000  00000000  00002c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015a3  00000000  00000000  00005121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ab22  00000000  00000000  000066c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000111e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001122c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00011468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006bc 	.word	0x080006bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006bc 	.word	0x080006bc

080001c8 <EXTI0_IRQHandler>:

static void GPIO_ButtonInterruptConfig();
static void GPIO_LedConfig();
void EXTI0_IRQHandler();

void EXTI0_IRQHandler(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	if(EXTI->PR & 0x1){
 80001cc:	4b09      	ldr	r3, [pc, #36]	@ (80001f4 <EXTI0_IRQHandler+0x2c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d00b      	beq.n	80001f0 <EXTI0_IRQHandler+0x28>

		EXTI->PR |= (0x1U <<0U);
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <EXTI0_IRQHandler+0x2c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a05      	ldr	r2, [pc, #20]	@ (80001f4 <EXTI0_IRQHandler+0x2c>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6153      	str	r3, [r2, #20]

		GPIO_WritePin(GPIOD, GPIO_PIN_ALL,GPIO_Pin_Set );
 80001e4:	2201      	movs	r2, #1
 80001e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80001ea:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <EXTI0_IRQHandler+0x30>)
 80001ec:	f000 fa22 	bl	8000634 <GPIO_WritePin>

	}


}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40013c00 	.word	0x40013c00
 80001f8:	40020c00 	.word	0x40020c00

080001fc <main>:

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 8000200:	f000 f804 	bl	800020c <GPIO_LedConfig>
	GPIO_ButtonInterruptConfig();
 8000204:	f000 f852 	bl	80002ac <GPIO_ButtonInterruptConfig>


	for(;;);
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0xc>

0800020c <GPIO_LedConfig>:

}

static void GPIO_LedConfig(){
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 8000212:	463b      	mov	r3, r7
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
 8000220:	615a      	str	r2, [r3, #20]

		RCC_GPIOD_CLK_ENABLE();
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
 8000226:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <GPIO_LedConfig+0x94>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022a:	4a1d      	ldr	r2, [pc, #116]	@ (80002a0 <GPIO_LedConfig+0x94>)
 800022c:	f043 0308 	orr.w	r3, r3, #8
 8000230:	6313      	str	r3, [r2, #48]	@ 0x30
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <GPIO_LedConfig+0x94>)
 8000234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000236:	f003 0308 	and.w	r3, r3, #8
 800023a:	61fb      	str	r3, [r7, #28]
		RCC_GPIOA_CLK_ENABLE();
 800023c:	2300      	movs	r3, #0
 800023e:	61bb      	str	r3, [r7, #24]
 8000240:	4b17      	ldr	r3, [pc, #92]	@ (80002a0 <GPIO_LedConfig+0x94>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000244:	4a16      	ldr	r2, [pc, #88]	@ (80002a0 <GPIO_LedConfig+0x94>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	@ 0x30
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <GPIO_LedConfig+0x94>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	61bb      	str	r3, [r7, #24]


		GPIO_InitStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000256:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800025a:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800025c:	2301      	movs	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOD, &GPIO_InitStruct);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <GPIO_LedConfig+0x98>)
 8000272:	f000 f956 	bl	8000522 <GPIO_Init>

		memset(&GPIO_InitStruct,0, sizeof(GPIO_InitStruct));
 8000276:	463b      	mov	r3, r7
 8000278:	2218      	movs	r2, #24
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f9f1 	bl	8000664 <memset>

		GPIO_InitStruct.pinNumber = GPIO_PIN_0;
 8000282:	2301      	movs	r3, #1
 8000284:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.PuPd = GPIO_PUPD_PULLDOWN;
 800028a:	2302      	movs	r3, #2
 800028c:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	463b      	mov	r3, r7
 8000290:	4619      	mov	r1, r3
 8000292:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <GPIO_LedConfig+0x9c>)
 8000294:	f000 f945 	bl	8000522 <GPIO_Init>
}
 8000298:	bf00      	nop
 800029a:	3720      	adds	r7, #32
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020c00 	.word	0x40020c00
 80002a8:	40020000 	.word	0x40020000

080002ac <GPIO_ButtonInterruptConfig>:



static void GPIO_ButtonInterruptConfig(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0

		RCC_SYSCFG_CLK_ENABLE();
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <GPIO_ButtonInterruptConfig+0x54>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ba:	4a11      	ldr	r2, [pc, #68]	@ (8000300 <GPIO_ButtonInterruptConfig+0x54>)
 80002bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <GPIO_ButtonInterruptConfig+0x54>)
 80002c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80002ca:	607b      	str	r3, [r7, #4]

		EXTI_InitTypeDef_t EXTI_InitStruct= {0};
 80002cc:	2300      	movs	r3, #0
 80002ce:	603b      	str	r3, [r7, #0]

		EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f8be 	bl	8000454 <EXTI_LineConfig>

		EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80002d8:	2301      	movs	r3, #1
 80002da:	70fb      	strb	r3, [r7, #3]
		EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	703b      	strb	r3, [r7, #0]
		EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 80002e0:	2300      	movs	r3, #0
 80002e2:	70bb      	strb	r3, [r7, #2]
		EXTI_InitStruct.TriggerSelection =EXTI_RTSR;
 80002e4:	2308      	movs	r3, #8
 80002e6:	707b      	strb	r3, [r7, #1]

		EXTI_Init(&EXTI_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f834 	bl	8000358 <EXTI_Init>

		NVIC_EnableInterrupt(EXTI0_IRQNumber);
 80002f0:	2006      	movs	r0, #6
 80002f2:	f000 f8e3 	bl	80004bc <NVIC_EnableInterrupt>

	}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f99f 	bl	8000674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ff61 	bl	80001fc <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080006dc 	.word	0x080006dc
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <EXTI_Init>:
 * @retval Void
 *
 */


void EXTI_Init(EXTI_InitTypeDef_t*EXTI_InitStruct){
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	uint32_t tempValue = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]

	tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000364:	4b3a      	ldr	r3, [pc, #232]	@ (8000450 <EXTI_Init+0xf8>)
 8000366:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000368:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <EXTI_Init+0xf8>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	2301      	movs	r3, #1
 8000374:	408b      	lsls	r3, r1
 8000376:	43db      	mvns	r3, r3
 8000378:	4935      	ldr	r1, [pc, #212]	@ (8000450 <EXTI_Init+0xf8>)
 800037a:	4013      	ands	r3, r2
 800037c:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800037e:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <EXTI_Init+0xf8>)
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4619      	mov	r1, r3
 8000388:	2301      	movs	r3, #1
 800038a:	408b      	lsls	r3, r1
 800038c:	43db      	mvns	r3, r3
 800038e:	4930      	ldr	r1, [pc, #192]	@ (8000450 <EXTI_Init+0xf8>)
 8000390:	4013      	ands	r3, r2
 8000392:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd !=	DISABLE){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d040      	beq.n	800041e <EXTI_Init+0xc6>

		tempValue += EXTI_InitStruct->EXTI_Mode;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

		*((__IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	2301      	movs	r3, #1
 80003b4:	fa03 f202 	lsl.w	r2, r3, r2
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	430a      	orrs	r2, r1
 80003bc:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 80003be:	4b24      	ldr	r3, [pc, #144]	@ (8000450 <EXTI_Init+0xf8>)
 80003c0:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003c2:	4b23      	ldr	r3, [pc, #140]	@ (8000450 <EXTI_Init+0xf8>)
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	2301      	movs	r3, #1
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	491f      	ldr	r1, [pc, #124]	@ (8000450 <EXTI_Init+0xf8>)
 80003d4:	4013      	ands	r3, r2
 80003d6:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <EXTI_Init+0xf8>)
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	2301      	movs	r3, #1
 80003e4:	408b      	lsls	r3, r1
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4919      	ldr	r1, [pc, #100]	@ (8000450 <EXTI_Init+0xf8>)
 80003ea:	4013      	ands	r3, r2
 80003ec:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection = EXTI_RFTSR){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2210      	movs	r2, #16
 80003f2:	705a      	strb	r2, [r3, #1]

			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <EXTI_Init+0xf8>)
 80003f6:	689a      	ldr	r2, [r3, #8]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	2301      	movs	r3, #1
 8000400:	408b      	lsls	r3, r1
 8000402:	4913      	ldr	r1, [pc, #76]	@ (8000450 <EXTI_Init+0xf8>)
 8000404:	4313      	orrs	r3, r2
 8000406:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <EXTI_Init+0xf8>)
 800040a:	68da      	ldr	r2, [r3, #12]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	2301      	movs	r3, #1
 8000414:	408b      	lsls	r3, r1
 8000416:	490e      	ldr	r1, [pc, #56]	@ (8000450 <EXTI_Init+0xf8>)
 8000418:	4313      	orrs	r3, r2
 800041a:	60cb      	str	r3, [r1, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((__IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);

	}

}
 800041c:	e012      	b.n	8000444 <EXTI_Init+0xec>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <EXTI_Init+0xf8>)
 8000420:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	461a      	mov	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	4413      	add	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	2301      	movs	r3, #1
 800043a:	4093      	lsls	r3, r2
 800043c:	43da      	mvns	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	400a      	ands	r2, r1
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40013c00 	.word	0x40013c00

08000454 <EXTI_LineConfig>:
 *
 * @retval Void
 *
 */

void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource){
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	460a      	mov	r2, r1
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	4613      	mov	r3, r2
 8000462:	71bb      	strb	r3, [r7, #6]

	uint32_t tempValue = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]

	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2U];
 8000468:	4a13      	ldr	r2, [pc, #76]	@ (80004b8 <EXTI_LineConfig+0x64>)
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	089b      	lsrs	r3, r3, #2
 800046e:	b2db      	uxtb	r3, r3
 8000470:	3302      	adds	r3, #2
 8000472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000476:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	220f      	movs	r2, #15
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	4013      	ands	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U) * 4);
 800048e:	79fa      	ldrb	r2, [r7, #7]
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	f003 0303 	and.w	r3, r3, #3
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTI_CR[EXTI_LineSource >> 2U] = tempValue;
 800049e:	4906      	ldr	r1, [pc, #24]	@ (80004b8 <EXTI_LineConfig+0x64>)
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	3302      	adds	r3, #2
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40013800 	.word	0x40013800

080004bc <NVIC_EnableInterrupt>:
 *
 */



void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQnumber){
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	uint32_t tempValue = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]

	tempValue = *((IRQnumber >> 5U) + NVIC_ISER0);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	095b      	lsrs	r3, r3, #5
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80004d6:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQnumber & 0x1FU));
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 031f 	and.w	r3, r3, #31
 80004e4:	2201      	movs	r2, #1
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQnumber & 0x1FU));
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f003 031f 	and.w	r3, r3, #31
 80004f8:	2201      	movs	r2, #1
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4313      	orrs	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
	*((IRQnumber >> 5U) + NVIC_ISER0) = tempValue;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	b2db      	uxtb	r3, r3
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000510:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	601a      	str	r2, [r3, #0]

}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <GPIO_Init>:
 *
 * @retval Void
 *
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx,GPIO_InitTypeDef_t *GPIO_ConfigStruct){
 8000522:	b480      	push	{r7}
 8000524:	b089      	sub	sp, #36	@ 0x24
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]

	uint32_t pos;
	uint32_t fakepos;
	uint32_t lastpos;

	for(pos =0; pos< 16; pos++){
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	e077      	b.n	8000622 <GPIO_Init+0x100>

		fakepos = (0x1 << pos);
 8000532:	2201      	movs	r2, #1
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	61bb      	str	r3, [r7, #24]
		lastpos = (GPIO_ConfigStruct->pinNumber)& fakepos;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	4013      	ands	r3, r2
 8000544:	617b      	str	r3, [r7, #20]

		if (fakepos = lastpos){
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	61bb      	str	r3, [r7, #24]
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d017      	beq.n	8000580 <GPIO_Init+0x5e>

			/* Mode Config  */

			uint32_t tempValue = GPIOx->MODER;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	613b      	str	r3, [r7, #16]

			tempValue &= ~(0x3U <<(pos*2));
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2203      	movs	r2, #3
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
			tempValue |= (GPIO_ConfigStruct->Mode <<(pos*2));
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	4313      	orrs	r3, r2
 8000578:	613b      	str	r3, [r7, #16]

			GPIOx->MODER = tempValue;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	601a      	str	r2, [r3, #0]
		}

		if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF){
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d003      	beq.n	8000590 <GPIO_Init+0x6e>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d12d      	bne.n	80005ec <GPIO_Init+0xca>

			/* Output Type Config */
			uint32_t tempValue = GPIOx->OTYPER;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	60fb      	str	r3, [r7, #12]
			tempValue &= ~(0x1U <<pos);
 8000596:	2201      	movs	r2, #1
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4013      	ands	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
			tempValue |= (GPIO_ConfigStruct->Otype << pos);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
			GPIOx->OTYPER = tempValue;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	605a      	str	r2, [r3, #4]

			/* Output Speed Config */
			tempValue = GPIOx->OSPEEDR;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	60fb      	str	r3, [r7, #12]
			tempValue &= ~(0x3U <<(pos*2));
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	2203      	movs	r2, #3
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	4013      	ands	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
			tempValue |= (GPIO_ConfigStruct->Speed << (pos*2));
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
			GPIOx->OSPEEDR = tempValue;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	609a      	str	r2, [r3, #8]
		}

		/* Output Push-Pull Config */
		uint32_t tempValue = GPIOx->PUPDR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
		tempValue &= ~(0x3U << (pos*2));
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2203      	movs	r2, #3
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
		tempValue |= (GPIO_ConfigStruct->PuPd <<(pos*2));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	691a      	ldr	r2, [r3, #16]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	4313      	orrs	r3, r2
 8000614:	60bb      	str	r3, [r7, #8]
		GPIOx->PUPDR = tempValue;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	60da      	str	r2, [r3, #12]
	for(pos =0; pos< 16; pos++){
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3301      	adds	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d984      	bls.n	8000532 <GPIO_Init+0x10>

	}

}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3724      	adds	r7, #36	@ 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <GPIO_WritePin>:
 *
 * @retval Void
 *
 */

void GPIO_WritePin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber, GPIO_PinState_t pinState ){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
 8000640:	4613      	mov	r3, r2
 8000642:	707b      	strb	r3, [r7, #1]

	if( pinState == GPIO_Pin_Set){
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d103      	bne.n	8000652 <GPIO_WritePin+0x1e>

		GPIOx->BSRR = pinNumber;
 800064a:	887a      	ldrh	r2, [r7, #2]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	619a      	str	r2, [r3, #24]

		GPIOx->BSRR = (pinNumber << 16U);

	}

}
 8000650:	e003      	b.n	800065a <GPIO_WritePin+0x26>
		GPIOx->BSRR = (pinNumber << 16U);
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	041a      	lsls	r2, r3, #16
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	619a      	str	r2, [r3, #24]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <memset>:
 8000664:	4402      	add	r2, r0
 8000666:	4603      	mov	r3, r0
 8000668:	4293      	cmp	r3, r2
 800066a:	d100      	bne.n	800066e <memset+0xa>
 800066c:	4770      	bx	lr
 800066e:	f803 1b01 	strb.w	r1, [r3], #1
 8000672:	e7f9      	b.n	8000668 <memset+0x4>

08000674 <__libc_init_array>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	4d0d      	ldr	r5, [pc, #52]	@ (80006ac <__libc_init_array+0x38>)
 8000678:	4c0d      	ldr	r4, [pc, #52]	@ (80006b0 <__libc_init_array+0x3c>)
 800067a:	1b64      	subs	r4, r4, r5
 800067c:	10a4      	asrs	r4, r4, #2
 800067e:	2600      	movs	r6, #0
 8000680:	42a6      	cmp	r6, r4
 8000682:	d109      	bne.n	8000698 <__libc_init_array+0x24>
 8000684:	4d0b      	ldr	r5, [pc, #44]	@ (80006b4 <__libc_init_array+0x40>)
 8000686:	4c0c      	ldr	r4, [pc, #48]	@ (80006b8 <__libc_init_array+0x44>)
 8000688:	f000 f818 	bl	80006bc <_init>
 800068c:	1b64      	subs	r4, r4, r5
 800068e:	10a4      	asrs	r4, r4, #2
 8000690:	2600      	movs	r6, #0
 8000692:	42a6      	cmp	r6, r4
 8000694:	d105      	bne.n	80006a2 <__libc_init_array+0x2e>
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f855 3b04 	ldr.w	r3, [r5], #4
 800069c:	4798      	blx	r3
 800069e:	3601      	adds	r6, #1
 80006a0:	e7ee      	b.n	8000680 <__libc_init_array+0xc>
 80006a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a6:	4798      	blx	r3
 80006a8:	3601      	adds	r6, #1
 80006aa:	e7f2      	b.n	8000692 <__libc_init_array+0x1e>
 80006ac:	080006d4 	.word	0x080006d4
 80006b0:	080006d4 	.word	0x080006d4
 80006b4:	080006d4 	.word	0x080006d4
 80006b8:	080006d8 	.word	0x080006d8

080006bc <_init>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr

080006c8 <_fini>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr
