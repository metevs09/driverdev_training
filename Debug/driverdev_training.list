
driverdev_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00001438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001440  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000767  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026a  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00001e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000152c  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000af3  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005f90  00000000  00000000  00003f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009ecf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000012c  00000000  00000000  00009f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000420 	.word	0x08000420

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000420 	.word	0x08000420

080001c8 <main>:


static void GPIO_LedConfig();

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	GPIO_LedConfig();
 80001cc:	f000 f80a 	bl	80001e4 <GPIO_LedConfig>
	GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_Pin_Set);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80001d6:	4802      	ldr	r0, [pc, #8]	@ (80001e0 <main+0x18>)
 80001d8:	f000 f8e6 	bl	80003a8 <GPIO_WritePin>



	for(;;);
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x14>
 80001e0:	40020c00 	.word	0x40020c00

080001e4 <GPIO_LedConfig>:

}

static void GPIO_LedConfig(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b088      	sub	sp, #32
 80001e8:	af00      	add	r7, sp, #0

	RCC_GPIOD_CLK_ENABLE(); // Clock is activetad
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
 80001ee:	4b13      	ldr	r3, [pc, #76]	@ (800023c <GPIO_LedConfig+0x58>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	4a12      	ldr	r2, [pc, #72]	@ (800023c <GPIO_LedConfig+0x58>)
 80001f4:	f043 0308 	orr.w	r3, r3, #8
 80001f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <GPIO_LedConfig+0x58>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fe:	f003 0308 	and.w	r3, r3, #8
 8000202:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef_t GPIO_LedStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]
 8000212:	615a      	str	r2, [r3, #20]
	GPIO_LedStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000214:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000218:	607b      	str	r3, [r7, #4]
	GPIO_LedStruct.Mode = GPIO_MODE_OUTPUT;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
	GPIO_LedStruct.Speed = GPIO_SPEED_LOW;
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
	GPIO_LedStruct.Otype = GPIO_OTYPE_PP;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
	GPIO_LedStruct.PuPd = GPIO_PUPD_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOD,&GPIO_LedStruct); // Configuration
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	4804      	ldr	r0, [pc, #16]	@ (8000240 <GPIO_LedConfig+0x5c>)
 8000230:	f000 f831 	bl	8000296 <GPIO_Init>

}
 8000234:	bf00      	nop
 8000236:	3720      	adds	r7, #32
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40023800 	.word	0x40023800
 8000240:	40020c00 	.word	0x40020c00

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	@ (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	@ (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	@ (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f8b1 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ffa7 	bl	80001c8 <main>

0800027a <LoopForever>:

LoopForever:
  b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC_IRQHandler>

08000296 <GPIO_Init>:
 *
 * @retval Void
 *
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx,GPIO_InitTypeDef_t *GPIO_ConfigStruct){
 8000296:	b480      	push	{r7}
 8000298:	b089      	sub	sp, #36	@ 0x24
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]

	uint32_t pos;
	uint32_t fakepos;
	uint32_t lastpos;

	for(pos =0; pos< 16; pos++){
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
 80002a4:	e077      	b.n	8000396 <GPIO_Init+0x100>

		fakepos = (0x1 << pos);
 80002a6:	2201      	movs	r2, #1
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	fa02 f303 	lsl.w	r3, r2, r3
 80002ae:	61bb      	str	r3, [r7, #24]
		lastpos = (GPIO_ConfigStruct->pinNumber)& fakepos;
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	69ba      	ldr	r2, [r7, #24]
 80002b6:	4013      	ands	r3, r2
 80002b8:	617b      	str	r3, [r7, #20]

		if(fakepos = lastpos){
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	61bb      	str	r3, [r7, #24]
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d017      	beq.n	80002f4 <GPIO_Init+0x5e>

			/* Mode Config  */

			uint32_t tempValue = GPIOx->MODER;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	613b      	str	r3, [r7, #16]

			tempValue &= ~(0x3U <<(pos*2));
 80002ca:	69fb      	ldr	r3, [r7, #28]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	2203      	movs	r2, #3
 80002d0:	fa02 f303 	lsl.w	r3, r2, r3
 80002d4:	43db      	mvns	r3, r3
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	4013      	ands	r3, r2
 80002da:	613b      	str	r3, [r7, #16]
			tempValue |= (GPIO_ConfigStruct->Mode <<(pos*2));
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	fa02 f303 	lsl.w	r3, r2, r3
 80002e8:	693a      	ldr	r2, [r7, #16]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	613b      	str	r3, [r7, #16]

			GPIOx->MODER = tempValue;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	693a      	ldr	r2, [r7, #16]
 80002f2:	601a      	str	r2, [r3, #0]
		}

		if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF){
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d003      	beq.n	8000304 <GPIO_Init+0x6e>
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	2b02      	cmp	r3, #2
 8000302:	d12d      	bne.n	8000360 <GPIO_Init+0xca>

			/* Output Type Config */
			uint32_t tempValue = GPIOx->OTYPER;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	60fb      	str	r3, [r7, #12]
			tempValue &= ~(0x1U <<pos);
 800030a:	2201      	movs	r2, #1
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	43db      	mvns	r3, r3
 8000314:	68fa      	ldr	r2, [r7, #12]
 8000316:	4013      	ands	r3, r2
 8000318:	60fb      	str	r3, [r7, #12]
			tempValue |= (GPIO_ConfigStruct->Otype << pos);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	4313      	orrs	r3, r2
 8000328:	60fb      	str	r3, [r7, #12]
			GPIOx->OTYPER = tempValue;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	605a      	str	r2, [r3, #4]

			/* Output Speed Config */
			tempValue = GPIOx->OSPEEDR;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	60fb      	str	r3, [r7, #12]
			tempValue &= ~(0x3U <<(pos*2));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	2203      	movs	r2, #3
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
			tempValue |= (GPIO_ConfigStruct->Speed << (pos*2));
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	fa02 f303 	lsl.w	r3, r2, r3
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	4313      	orrs	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
			GPIOx->OSPEEDR = tempValue;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	609a      	str	r2, [r3, #8]
		}

		/* Output Push-Pull Config */
		uint32_t tempValue = GPIOx->PUPDR;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	60bb      	str	r3, [r7, #8]
		tempValue &= ~(0x3U << (pos*2));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2203      	movs	r2, #3
 800036c:	fa02 f303 	lsl.w	r3, r2, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	4013      	ands	r3, r2
 8000376:	60bb      	str	r3, [r7, #8]
		tempValue |= (GPIO_ConfigStruct->PuPd <<(pos*2));
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	691a      	ldr	r2, [r3, #16]
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	fa02 f303 	lsl.w	r3, r2, r3
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	4313      	orrs	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
		GPIOx->PUPDR = tempValue;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	60da      	str	r2, [r3, #12]
	for(pos =0; pos< 16; pos++){
 8000390:	69fb      	ldr	r3, [r7, #28]
 8000392:	3301      	adds	r3, #1
 8000394:	61fb      	str	r3, [r7, #28]
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d984      	bls.n	80002a6 <GPIO_Init+0x10>

	}

}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3724      	adds	r7, #36	@ 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <GPIO_WritePin>:
 *
 * @retval Void
 *
 */

void GPIO_WritePin(GPIO_TypeDef_t *GPIOx, uint16_t pinNumber, GPIO_PinState_t pinState ){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
 80003b4:	4613      	mov	r3, r2
 80003b6:	707b      	strb	r3, [r7, #1]

	if( pinState == GPIO_Pin_Set){
 80003b8:	787b      	ldrb	r3, [r7, #1]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d103      	bne.n	80003c6 <GPIO_WritePin+0x1e>

		GPIOx->BSRR = pinNumber;
 80003be:	887a      	ldrh	r2, [r7, #2]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	619a      	str	r2, [r3, #24]

		GPIOx->BSRR = (pinNumber << 16U);

	}

}
 80003c4:	e003      	b.n	80003ce <GPIO_WritePin+0x26>
		GPIOx->BSRR = (pinNumber << 16U);
 80003c6:	887b      	ldrh	r3, [r7, #2]
 80003c8:	041a      	lsls	r2, r3, #16
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	619a      	str	r2, [r3, #24]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	@ (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	@ (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
