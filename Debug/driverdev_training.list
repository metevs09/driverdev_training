
driverdev_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001068  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080011f0  080011f0  000021f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001208  08001208  00003008  2**0
                  CONTENTS
  4 .ARM          00000008  08001208  08001208  00002208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001210  08001210  00003008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001210  08001210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001214  08001214  00002214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08001218  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003008  2**0
                  CONTENTS
 10 .bss          00000070  20000008  20000008  00003008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00003008  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000131d  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000604  00000000  00000000  0000434f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00004958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b6  00000000  00000000  00004a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d3f  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001da2  00000000  00000000  0000785d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c88e  00000000  00000000  000095ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00015e8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000444  00000000  00000000  00015ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00016314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011d8 	.word	0x080011d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080011d8 	.word	0x080011d8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <main>:
static void USART_Config(void);
static void GPIO_config(void);

USART_Handle_Typedef USART_Handle;

int main(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	SPI_GPIO_Config();
	SPI_config();

    */

	USART_Config();
 80009b8:	f000 f812 	bl	80009e0 <USART_Config>
	GPIO_config();
 80009bc:	f000 f84a 	bl	8000a54 <GPIO_config>

	static char msgToSent[] = "Hello";

	USART_TransmitData(&USART_Handle, (uint8_t*)msgToSent, strlen(msgToSent));
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <main+0x24>)
 80009c2:	f7ff fc01 	bl	80001c8 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4902      	ldr	r1, [pc, #8]	@ (80009d8 <main+0x24>)
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <main+0x28>)
 80009d0:	f000 fb18 	bl	8001004 <USART_TransmitData>

	for(;;){}
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <main+0x20>
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000024 	.word	0x20000024

080009e0 <USART_Config>:


}

static void USART_Config(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

	RCC_USART2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <USART_Config+0x68>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <USART_Config+0x68>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <USART_Config+0x68>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fe:	607b      	str	r3, [r7, #4]

	USART_Handle.Instance = USART2;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <USART_Config+0x6c>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <USART_Config+0x70>)
 8000a04:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.BaudRate = 9600;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <USART_Config+0x6c>)
 8000a08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a0c:	605a      	str	r2, [r3, #4]
	USART_Handle.Init.HwFlowCtl = USART_HW_NONE;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <USART_Config+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
	USART_Handle.Init.Mode = USART_MODE_Tx;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <USART_Config+0x6c>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	609a      	str	r2, [r3, #8]
	USART_Handle.Init.OverSampling = USART_OVERSAMPL_16;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <USART_Config+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	USART_Handle.Init.Parity = USART_PARITY_NONE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <USART_Config+0x6c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
	USART_Handle.Init.StopBits = USART_STOPBITS_1;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <USART_Config+0x6c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
	USART_Handle.Init.Wordlength = USART_WORDLENGTH_8Bits;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <USART_Config+0x6c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]

	USART_Init(&USART_Handle);
 8000a32:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <USART_Config+0x6c>)
 8000a34:	f000 f9b0 	bl	8000d98 <USART_Init>
	USART_PeripCmd(&USART_Handle, ENABLE);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <USART_Config+0x6c>)
 8000a3c:	f000 fb2d 	bl	800109a <USART_PeripCmd>

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	20000024 	.word	0x20000024
 8000a50:	40004400 	.word	0x40004400

08000a54 <GPIO_config>:



static void GPIO_config(void){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <GPIO_config+0x5c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <GPIO_config+0x5c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <GPIO_config+0x5c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.pinNumber = GPIO_PIN_2;
 8000a84:	2304      	movs	r3, #4
 8000a86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.AF = GPIO_AF7;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <GPIO_config+0x60>)
 8000aa2:	f000 f832 	bl	8000b0a <GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f000 fb0d 	bl	8001104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff ff63 	bl	80009b4 <main>

08000aee <LoopForever>:

LoopForever:
  b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000afc:	08001218 	.word	0x08001218
  ldr r2, =_sbss
 8000b00:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b04:	20000078 	.word	0x20000078

08000b08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>

08000b0a <GPIO_Init>:
 *
 * @retval Void
 *
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx,GPIO_InitTypeDef_t *GPIO_ConfigStruct){
 8000b0a:	b480      	push	{r7}
 8000b0c:	b087      	sub	sp, #28
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]

	uint32_t pos;
	uint32_t fakepos;
	uint32_t lastpos;

	for(pos =0; pos< 16; pos++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e09f      	b.n	8000c5a <GPIO_Init+0x150>

		fakepos = (0x1 << pos);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	613b      	str	r3, [r7, #16]
		lastpos = (GPIO_ConfigStruct->pinNumber)& fakepos;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
		uint32_t tempValue;

		if (fakepos == lastpos){
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	f040 808e 	bne.w	8000c54 <GPIO_Init+0x14a>

			/* Mode Config  */

			tempValue = GPIOx->MODER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60bb      	str	r3, [r7, #8]

			tempValue &= ~(0x3U <<(pos*2));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->Mode <<(pos*2));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]

			GPIOx->MODER = tempValue;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	601a      	str	r2, [r3, #0]

				if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF){
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d003      	beq.n	8000b78 <GPIO_Init+0x6e>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d12d      	bne.n	8000bd4 <GPIO_Init+0xca>

				/* Output Type Config */
				tempValue = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U <<pos);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Otype << pos);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	605a      	str	r2, [r3, #4]

				/* Output Speed Config */
				tempValue = GPIOx->OSPEEDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U <<(pos*2));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Speed << (pos*2));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	609a      	str	r2, [r3, #8]

				}

			/* Output Push-Pull Config */
			tempValue = GPIOx->PUPDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (pos*2));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->PuPd << (pos*2));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	60da      	str	r2, [r3, #12]

					if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF){
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <GPIO_Init+0x14a>

					tempValue = GPIOx->AFR[pos >> 3U];
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	60bb      	str	r3, [r7, #8]
					tempValue &= ~(0xFU << ((pos & 0x7U)*4));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
					tempValue |= (GPIO_ConfigStruct->AF <<((pos & 0x7U)*4));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
					GPIOx->AFR[pos >> 3U] = tempValue;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(pos =0; pos< 16; pos++){
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	f67f af5c 	bls.w	8000b1a <GPIO_Init+0x10>

			}

	}

}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	371c      	adds	r7, #28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
	...

08000c70 <RCC_GetSystemClock>:
 * @retval SystemCoreClock
 *
 */


uint32_t RCC_GetSystemClock(void){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0

	uint32_t SystemCoreClock = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
	uint8_t ClockSource = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	70fb      	strb	r3, [r7, #3]

	ClockSource = ((RCC->CFGR >> 2U) & 0x3U);
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <RCC_GetSystemClock+0x44>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	70fb      	strb	r3, [r7, #3]

	switch(ClockSource){
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <RCC_GetSystemClock+0x28>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d003      	beq.n	8000c9e <RCC_GetSystemClock+0x2e>
 8000c96:	e005      	b.n	8000ca4 <RCC_GetSystemClock+0x34>

			case 0: SystemCoreClock =16000000; break;
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <RCC_GetSystemClock+0x48>)
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	e004      	b.n	8000ca8 <RCC_GetSystemClock+0x38>
			case 1: SystemCoreClock =8000000; break;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <RCC_GetSystemClock+0x4c>)
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e001      	b.n	8000ca8 <RCC_GetSystemClock+0x38>

			default: SystemCoreClock = 16000000;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <RCC_GetSystemClock+0x48>)
 8000ca6:	607b      	str	r3, [r7, #4]


	}

	return SystemCoreClock;
 8000ca8:	687b      	ldr	r3, [r7, #4]


}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	00f42400 	.word	0x00f42400
 8000cbc:	007a1200 	.word	0x007a1200

08000cc0 <RCC_GetHClock>:
 *
 * @retval AHB_PeripClock
 *
 */

uint32_t RCC_GetHClock(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

	uint32_t AHB_PeripClock = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
	uint32_t SystemCoreClock = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE_Value = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]

	SystemCoreClock = RCC_GetSystemClock();
 8000cd2:	f7ff ffcd 	bl	8000c70 <RCC_GetSystemClock>
 8000cd6:	60b8      	str	r0, [r7, #8]

	HPRE_Value = ((RCC->CFGR >> 4U) & (0xFU));
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <RCC_GetHClock+0x40>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	71fb      	strb	r3, [r7, #7]

	AHB_PeripClock = (SystemCoreClock >> AHB_Prescaler[HPRE_Value]);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <RCC_GetHClock+0x44>)
 8000cea:	56d3      	ldrsb	r3, [r2, r3]
 8000cec:	461a      	mov	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	40d3      	lsrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]


	return AHB_PeripClock;
 8000cf4:	68fb      	ldr	r3, [r7, #12]

}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	080011f0 	.word	0x080011f0

08000d08 <RCC_GetAPB1Clock>:
 *
 * @retval APB1_PeripClock
 *
 */

uint32_t RCC_GetAPB1Clock(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

	uint32_t APB1_PeripClock = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeripClock = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE1 = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]

	AHB_PeripClock = RCC_GetHClock();
 8000d1a:	f7ff ffd1 	bl	8000cc0 <RCC_GetHClock>
 8000d1e:	60b8      	str	r0, [r7, #8]

	PPRE1 = ((RCC->CFGR >> 10U) & (0x7U));
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <RCC_GetAPB1Clock+0x40>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	0a9b      	lsrs	r3, r3, #10
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	71fb      	strb	r3, [r7, #7]

	APB1_PeripClock = (AHB_PeripClock >> APB_Prescaler[PPRE1]);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <RCC_GetAPB1Clock+0x44>)
 8000d32:	56d3      	ldrsb	r3, [r2, r3]
 8000d34:	461a      	mov	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	40d3      	lsrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	return APB1_PeripClock;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	08001200 	.word	0x08001200

08000d50 <RCC_GetAPB2Clock>:
 *
 * @retval APB2_PeripClock
 *
 */

uint32_t RCC_GetAPB2Clock(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

	uint32_t APB2_PeripClock = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeripClock = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE2 = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]

	AHB_PeripClock = RCC_GetHClock();
 8000d62:	f7ff ffad 	bl	8000cc0 <RCC_GetHClock>
 8000d66:	60b8      	str	r0, [r7, #8]

	PPRE2 = ((RCC->CFGR >> 13U) & (0x7U));
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <RCC_GetAPB2Clock+0x40>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	0b5b      	lsrs	r3, r3, #13
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	71fb      	strb	r3, [r7, #7]

	APB2_PeripClock = (AHB_PeripClock >> APB_Prescaler[PPRE2]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <RCC_GetAPB2Clock+0x44>)
 8000d7a:	56d3      	ldrsb	r3, [r2, r3]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	40d3      	lsrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

	return APB2_PeripClock;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	08001200 	.word	0x08001200

08000d98 <USART_Init>:
 *
 * @retval Void
 *
 */

void USART_Init(USART_Handle_Typedef *USART_Handle){
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	uint32_t tempReg = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]

	CLEAR_BIT(USART_Handle->Instance->SR,USART_TC_FLAG);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000db2:	601a      	str	r2, [r3, #0]
*
********************************************** Baud rate register Configuration ******************************************
*
*/
	uint32_t periphClock;
	uint32_t MantissaPart = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
	uint32_t fractionPart = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
	uint32_t USART_BRR = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
	double USART_DIV_Value = 0;
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(USART_Handle->Instance == USART1 || USART_Handle->Instance == USART6 ){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a88      	ldr	r2, [pc, #544]	@ (8000ff4 <USART_Init+0x25c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d004      	beq.n	8000de0 <USART_Init+0x48>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a87      	ldr	r2, [pc, #540]	@ (8000ff8 <USART_Init+0x260>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d103      	bne.n	8000de8 <USART_Init+0x50>

		periphClock =  RCC_GetAPB2Clock();
 8000de0:	f7ff ffb6 	bl	8000d50 <RCC_GetAPB2Clock>
 8000de4:	6278      	str	r0, [r7, #36]	@ 0x24
 8000de6:	e002      	b.n	8000dee <USART_Init+0x56>
	}

	else{

		periphClock =  RCC_GetAPB1Clock();
 8000de8:	f7ff ff8e 	bl	8000d08 <RCC_GetAPB1Clock>
 8000dec:	6278      	str	r0, [r7, #36]	@ 0x24
	}

	if(USART_Handle->Init.OverSampling == USART_OVERSAMPL_16 ){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d149      	bne.n	8000e8a <USART_Init+0xf2>

		USART_Handle->Instance->BRR &= ~(0xFFFFU);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	6093      	str	r3, [r2, #8]

		USART_DIV_Value = __USART_DIV_VALUE_16(periphClock, USART_Handle->Init.BaudRate);
 8000e06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e08:	f7ff fb28 	bl	800045c <__aeabi_ui2d>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460d      	mov	r5, r1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb21 	bl	800045c <__aeabi_ui2d>
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b77      	ldr	r3, [pc, #476]	@ (8000ffc <USART_Init+0x264>)
 8000e20:	f7ff fb96 	bl	8000550 <__aeabi_dmul>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4620      	mov	r0, r4
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	f7ff fcba 	bl	80007a4 <__aeabi_ddiv>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MantissaPart = (uint32_t)(USART_DIV_Value);
 8000e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e3c:	f7ff fd9a 	bl	8000974 <__aeabi_d2uiz>
 8000e40:	4603      	mov	r3, r0
 8000e42:	623b      	str	r3, [r7, #32]
		fractionPart = ((uint32_t)round((USART_DIV_Value - MantissaPart) * (16U))& 0x0FU);
 8000e44:	6a38      	ldr	r0, [r7, #32]
 8000e46:	f7ff fb09 	bl	800045c <__aeabi_ui2d>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e52:	f7ff f9c5 	bl	80001e0 <__aeabi_dsub>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b66      	ldr	r3, [pc, #408]	@ (8000ffc <USART_Init+0x264>)
 8000e64:	f7ff fb74 	bl	8000550 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f000 f96c 	bl	800114c <round>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fd7a 	bl	8000974 <__aeabi_d2uiz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	e048      	b.n	8000f1c <USART_Init+0x184>

	}

	else{

		USART_Handle->Instance->BRR &= ~(0xFFFFU);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	0c1b      	lsrs	r3, r3, #16
 8000e96:	041b      	lsls	r3, r3, #16
 8000e98:	6093      	str	r3, [r2, #8]

		USART_DIV_Value = __USART_DIV_VALUE_8(periphClock, USART_Handle->Init.BaudRate);
 8000e9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e9c:	f7ff fade 	bl	800045c <__aeabi_ui2d>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	460d      	mov	r5, r1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fad7 	bl	800045c <__aeabi_ui2d>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b53      	ldr	r3, [pc, #332]	@ (8001000 <USART_Init+0x268>)
 8000eb4:	f7ff fb4c 	bl	8000550 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff fc70 	bl	80007a4 <__aeabi_ddiv>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MantissaPart = (uint32_t)(USART_DIV_Value);
 8000ecc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ed0:	f7ff fd50 	bl	8000974 <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	623b      	str	r3, [r7, #32]
		fractionPart = ((uint32_t)round((USART_DIV_Value - MantissaPart) * (8U))& 0x07U);
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fabf 	bl	800045c <__aeabi_ui2d>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ee6:	f7ff f97b 	bl	80001e0 <__aeabi_dsub>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b42      	ldr	r3, [pc, #264]	@ (8001000 <USART_Init+0x268>)
 8000ef8:	f7ff fb2a 	bl	8000550 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f000 f922 	bl	800114c <round>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fd30 	bl	8000974 <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]

	}

	USART_BRR |= (MantissaPart << 4U);
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
	USART_BRR |= (fractionPart << 0U);
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

	USART_Handle->Instance->BRR = USART_BRR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	609a      	str	r2, [r3, #8]
*
**********************************************  Control Register 1 Configuration *****************************************
*
*/

	tempReg = USART_Handle->Instance->CR1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]

	tempReg |= (USART_Handle->Init.OverSampling)|(USART_Handle->Init.Wordlength)|\
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.WAKE)|(USART_Handle->Init.Parity)|(USART_Handle->Init.Mode)|\
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	tempReg |= (USART_Handle->Init.OverSampling)|(USART_Handle->Init.Wordlength)|\
 8000f4c:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.WAKE)|(USART_Handle->Init.Parity)|(USART_Handle->Init.Mode)|\
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.RWU)|(USART_Handle->Advance_Init.SENDBRK);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
			(USART_Handle->Advance_Init.WAKE)|(USART_Handle->Init.Parity)|(USART_Handle->Init.Mode)|\
 8000f5e:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.RWU)|(USART_Handle->Advance_Init.SENDBRK);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f64:	4313      	orrs	r3, r2
	tempReg |= (USART_Handle->Init.OverSampling)|(USART_Handle->Init.Wordlength)|\
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]

	USART_Handle->Instance->CR1 = tempReg;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
*
*********************************************  Control Register 2 Configuration ******************************************
*
*/

	tempReg = USART_Handle->Instance->CR2;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	61bb      	str	r3, [r7, #24]
	tempReg &= ~(0x3 << USART_CR2_STOP);
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f82:	61bb      	str	r3, [r7, #24]

	tempReg |= (USART_Handle->Advance_Init.LIN_MODE)|(USART_Handle->Init.StopBits)|(USART_Handle->Advance_Init.CLK_EN)|\
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.CPOL)|(USART_Handle->Advance_Init.CPHA)|(USART_Handle->Advance_Init.LBCL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	tempReg |= (USART_Handle->Advance_Init.LIN_MODE)|(USART_Handle->Init.StopBits)|(USART_Handle->Advance_Init.CLK_EN)|\
 8000f98:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.CPOL)|(USART_Handle->Advance_Init.CPHA)|(USART_Handle->Advance_Init.LBCL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa4:	4313      	orrs	r3, r2
	tempReg |= (USART_Handle->Advance_Init.LIN_MODE)|(USART_Handle->Init.StopBits)|(USART_Handle->Advance_Init.CLK_EN)|\
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

	USART_Handle->Instance->CR2 = tempReg;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	611a      	str	r2, [r3, #16]
*
**********************************************  Control Register 3 Configuration *****************************************
*
*/

	tempReg = USART_Handle->Instance->CR3;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	61bb      	str	r3, [r7, #24]

	tempReg |= (USART_Handle->Advance_Init.ONEBIT)|(USART_Handle->Init.HwFlowCtl)|(USART_Handle->Advance_Init.DMA)|\
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.SC_MOD)|(USART_Handle->Advance_Init.HDSEL)|(USART_Handle->Advance_Init.IRDA_MODE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
	tempReg |= (USART_Handle->Advance_Init.ONEBIT)|(USART_Handle->Init.HwFlowCtl)|(USART_Handle->Advance_Init.DMA)|\
 8000fd0:	431a      	orrs	r2, r3
			(USART_Handle->Advance_Init.SC_MOD)|(USART_Handle->Advance_Init.HDSEL)|(USART_Handle->Advance_Init.IRDA_MODE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fdc:	4313      	orrs	r3, r2
	tempReg |= (USART_Handle->Advance_Init.ONEBIT)|(USART_Handle->Init.HwFlowCtl)|(USART_Handle->Advance_Init.DMA)|\
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

	USART_Handle->Instance->CR3 = tempReg;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	615a      	str	r2, [r3, #20]



}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40300000 	.word	0x40300000
 8001000:	40200000 	.word	0x40200000

08001004 <USART_TransmitData>:
 *
 * @retval Void
 *
 */

void USART_TransmitData(USART_Handle_Typedef *USART_Handle, uint8_t *pData,uint16_t dataSize){
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	80fb      	strh	r3, [r7, #6]

	uint16_t *data16Bits;

	if((USART_Handle->Init.Wordlength == USART_WORDLENGTH_9Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE)){
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800101a:	d106      	bne.n	800102a <USART_TransmitData+0x26>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <USART_TransmitData+0x26>

		data16Bits = (uint16_t*)pData;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e001      	b.n	800102e <USART_TransmitData+0x2a>

	}

	else{

		data16Bits = NULL;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

	}


	while(dataSize > 0){
 800102e:	e024      	b.n	800107a <USART_TransmitData+0x76>

		while(!(USART_GetFlagStatus(USART_Handle,USART_TxE_FLAG)));
 8001030:	bf00      	nop
 8001032:	2180      	movs	r1, #128	@ 0x80
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f84f 	bl	80010d8 <USART_GetFlagStatus>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f8      	beq.n	8001032 <USART_TransmitData+0x2e>

		if(data16Bits == NULL ){
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10b      	bne.n	800105e <USART_TransmitData+0x5a>

			USART_Handle->Instance->DR = (uint8_t)(*pData & 0xFFU);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
			pData++;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
			dataSize--;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	3b01      	subs	r3, #1
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	e00d      	b.n	800107a <USART_TransmitData+0x76>
		}

		else{

			USART_Handle->Instance->DR = (uint16_t)(*data16Bits & (0x01FFU));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800106c:	605a      	str	r2, [r3, #4]
			data16Bits++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3302      	adds	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
			dataSize -= 2;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	3b02      	subs	r3, #2
 8001078:	80fb      	strh	r3, [r7, #6]
	while(dataSize > 0){
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1d7      	bne.n	8001030 <USART_TransmitData+0x2c>
		}

	}

	while(!(USART_GetFlagStatus(USART_Handle,USART_TC_FLAG)));
 8001080:	bf00      	nop
 8001082:	2140      	movs	r1, #64	@ 0x40
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f827 	bl	80010d8 <USART_GetFlagStatus>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f8      	beq.n	8001082 <USART_TransmitData+0x7e>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <USART_PeripCmd>:
 *
 * @retval Void
 *
 */

void USART_PeripCmd(USART_Handle_Typedef *USART_Handle,Functional_State_t stateOfUSART){
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]

	if (stateOfUSART == ENABLE){
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <USART_PeripCmd+0x24>

		USART_Handle->Instance->CR1 |= (0x1 << USART_CR1_UE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80010ba:	60da      	str	r2, [r3, #12]
		else{

			USART_Handle->Instance->CR1 &= ~(0x1 << USART_CR1_UE);

		}
}
 80010bc:	e007      	b.n	80010ce <USART_PeripCmd+0x34>
			USART_Handle->Instance->CR1 &= ~(0x1 << USART_CR1_UE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010cc:	60da      	str	r2, [r3, #12]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <USART_GetFlagStatus>:
 *
 * @retval USART_FlagStatus_t
 *
 */

USART_FlagStatus_t USART_GetFlagStatus(USART_Handle_Typedef *USART_Handle, uint16_t flagName){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]


	return(READ_BIT(USART_Handle->Instance->SR, flagName)? USART_FLAG_SET : USART_FLAG_RESET);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2301      	movne	r3, #1
 80010f4:	2300      	moveq	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <__libc_init_array>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4d0d      	ldr	r5, [pc, #52]	@ (800113c <__libc_init_array+0x38>)
 8001108:	4c0d      	ldr	r4, [pc, #52]	@ (8001140 <__libc_init_array+0x3c>)
 800110a:	1b64      	subs	r4, r4, r5
 800110c:	10a4      	asrs	r4, r4, #2
 800110e:	2600      	movs	r6, #0
 8001110:	42a6      	cmp	r6, r4
 8001112:	d109      	bne.n	8001128 <__libc_init_array+0x24>
 8001114:	4d0b      	ldr	r5, [pc, #44]	@ (8001144 <__libc_init_array+0x40>)
 8001116:	4c0c      	ldr	r4, [pc, #48]	@ (8001148 <__libc_init_array+0x44>)
 8001118:	f000 f85e 	bl	80011d8 <_init>
 800111c:	1b64      	subs	r4, r4, r5
 800111e:	10a4      	asrs	r4, r4, #2
 8001120:	2600      	movs	r6, #0
 8001122:	42a6      	cmp	r6, r4
 8001124:	d105      	bne.n	8001132 <__libc_init_array+0x2e>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	f855 3b04 	ldr.w	r3, [r5], #4
 800112c:	4798      	blx	r3
 800112e:	3601      	adds	r6, #1
 8001130:	e7ee      	b.n	8001110 <__libc_init_array+0xc>
 8001132:	f855 3b04 	ldr.w	r3, [r5], #4
 8001136:	4798      	blx	r3
 8001138:	3601      	adds	r6, #1
 800113a:	e7f2      	b.n	8001122 <__libc_init_array+0x1e>
 800113c:	08001210 	.word	0x08001210
 8001140:	08001210 	.word	0x08001210
 8001144:	08001210 	.word	0x08001210
 8001148:	08001214 	.word	0x08001214

0800114c <round>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8001152:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8001156:	2a13      	cmp	r2, #19
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	460b      	mov	r3, r1
 800115e:	dc1a      	bgt.n	8001196 <round+0x4a>
 8001160:	2a00      	cmp	r2, #0
 8001162:	da0b      	bge.n	800117c <round+0x30>
 8001164:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8001168:	3201      	adds	r2, #1
 800116a:	bf04      	itt	eq
 800116c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8001170:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8001174:	2200      	movs	r2, #0
 8001176:	461d      	mov	r5, r3
 8001178:	4614      	mov	r4, r2
 800117a:	e016      	b.n	80011aa <round+0x5e>
 800117c:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <round+0x88>)
 800117e:	4110      	asrs	r0, r2
 8001180:	4001      	ands	r1, r0
 8001182:	4321      	orrs	r1, r4
 8001184:	d011      	beq.n	80011aa <round+0x5e>
 8001186:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800118a:	fa41 f202 	asr.w	r2, r1, r2
 800118e:	4413      	add	r3, r2
 8001190:	ea23 0300 	bic.w	r3, r3, r0
 8001194:	e7ee      	b.n	8001174 <round+0x28>
 8001196:	2a33      	cmp	r2, #51	@ 0x33
 8001198:	dd0a      	ble.n	80011b0 <round+0x64>
 800119a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800119e:	d104      	bne.n	80011aa <round+0x5e>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f7ff f81f 	bl	80001e4 <__adddf3>
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	40f8      	lsrs	r0, r7
 80011ba:	4220      	tst	r0, r4
 80011bc:	d0f5      	beq.n	80011aa <round+0x5e>
 80011be:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80011c2:	2201      	movs	r2, #1
 80011c4:	408a      	lsls	r2, r1
 80011c6:	1912      	adds	r2, r2, r4
 80011c8:	bf28      	it	cs
 80011ca:	3301      	addcs	r3, #1
 80011cc:	ea22 0200 	bic.w	r2, r2, r0
 80011d0:	e7d1      	b.n	8001176 <round+0x2a>
 80011d2:	bf00      	nop
 80011d4:	000fffff 	.word	0x000fffff

080011d8 <_init>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	bf00      	nop
 80011dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011de:	bc08      	pop	{r3}
 80011e0:	469e      	mov	lr, r3
 80011e2:	4770      	bx	lr

080011e4 <_fini>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr
